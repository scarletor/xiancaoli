// src/index.ts
import debug from "debug";
var debugCommand = debug("colyseus:command");
var Command = class {
  setPayload(payload) {
    this.payload = payload;
    return this;
  }
  /**
   * Delay the execution by `milliseconds`
   * @param milliseconds
   */
  delay(milliseconds) {
    return new Promise((resolve) => this.clock.setTimeout(resolve, milliseconds));
  }
};
var Dispatcher = class {
  constructor(room) {
    this.stopped = false;
    this.room = room;
  }
  stop() {
    this.stopped = true;
  }
  resume() {
    this.stopped = false;
  }
  dispatch(command, payload) {
    if (this.stopped) {
      debugCommand(`dispatcher is stopped -> ${command.constructor.name} ${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`);
      return;
    }
    command.room = this.room;
    command.state = this.room.state;
    command.clock = this.room.clock;
    if (payload) {
      command.setPayload(payload);
    }
    if (command.validate && !command.validate(command.payload)) {
      const commandPayload = `${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`;
      debugCommand(`invalid -> ${command.constructor.name} ${commandPayload}`);
      return;
    }
    if (debugCommand.enabled) {
      debugCommand(`execute -> ${command.constructor.name} ${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`);
    }
    const result = command.execute(command.payload);
    if (result instanceof Promise) {
      return result.then(async (childCommands) => {
        const nextCommands2 = this.getNextCommands(childCommands);
        for (let i = 0; i < nextCommands2.length; i++) {
          await this.dispatch(nextCommands2[i]);
        }
      });
    }
    const nextCommands = this.getNextCommands(result);
    const hasNextCommands = !!nextCommands.length;
    if (hasNextCommands) {
      let lastResult;
      for (let i = 0; i < nextCommands.length; i++) {
        if (lastResult instanceof Promise) {
          lastResult = lastResult.then(() => this.dispatch(nextCommands[i]));
        } else {
          lastResult = this.dispatch(nextCommands[i]);
        }
      }
      return lastResult;
    }
  }
  // | Array<Promise<Command[] | void>>
  getNextCommands(nextCommands) {
    if (!nextCommands) {
      return [];
    }
    if (Array.isArray(nextCommands)) {
      return nextCommands;
    }
    return [nextCommands];
  }
};
export {
  Command,
  Dispatcher
};
