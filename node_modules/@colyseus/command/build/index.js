"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  Command: () => Command,
  Dispatcher: () => Dispatcher
});
module.exports = __toCommonJS(src_exports);
var import_debug = __toESM(require("debug"));
const debugCommand = (0, import_debug.default)("colyseus:command");
class Command {
  setPayload(payload) {
    this.payload = payload;
    return this;
  }
  /**
   * Delay the execution by `milliseconds`
   * @param milliseconds
   */
  delay(milliseconds) {
    return new Promise((resolve) => this.clock.setTimeout(resolve, milliseconds));
  }
}
class Dispatcher {
  constructor(room) {
    this.stopped = false;
    this.room = room;
  }
  stop() {
    this.stopped = true;
  }
  resume() {
    this.stopped = false;
  }
  dispatch(command, payload) {
    if (this.stopped) {
      debugCommand(`dispatcher is stopped -> ${command.constructor.name} ${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`);
      return;
    }
    command.room = this.room;
    command.state = this.room.state;
    command.clock = this.room.clock;
    if (payload) {
      command.setPayload(payload);
    }
    if (command.validate && !command.validate(command.payload)) {
      const commandPayload = `${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`;
      debugCommand(`invalid -> ${command.constructor.name} ${commandPayload}`);
      return;
    }
    if (debugCommand.enabled) {
      debugCommand(`execute -> ${command.constructor.name} ${command.payload ? `(${JSON.stringify(command.payload)})` : ""}`);
    }
    const result = command.execute(command.payload);
    if (result instanceof Promise) {
      return result.then(async (childCommands) => {
        const nextCommands2 = this.getNextCommands(childCommands);
        for (let i = 0; i < nextCommands2.length; i++) {
          await this.dispatch(nextCommands2[i]);
        }
      });
    }
    const nextCommands = this.getNextCommands(result);
    const hasNextCommands = !!nextCommands.length;
    if (hasNextCommands) {
      let lastResult;
      for (let i = 0; i < nextCommands.length; i++) {
        if (lastResult instanceof Promise) {
          lastResult = lastResult.then(() => this.dispatch(nextCommands[i]));
        } else {
          lastResult = this.dispatch(nextCommands[i]);
        }
      }
      return lastResult;
    }
  }
  // | Array<Promise<Command[] | void>>
  getNextCommands(nextCommands) {
    if (!nextCommands) {
      return [];
    }
    if (Array.isArray(nextCommands)) {
      return nextCommands;
    }
    return [nextCommands];
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Command,
  Dispatcher
});
